# See https://docs.astral.sh/ruff/configuration/
# For a full list of supported rules, see https://docs.astral.sh/ruff/rules/
# For a full list of options, see https://docs.astral.sh/ruff/settings/

# Same as Black.
line-length = 80
# Assume Python 3.7+
target-version = "py37"

# The gRPC project has a lot of generated code.
# We exclude them here. This is based on black.toml
# and tools/distrib/ruff_code.sh
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "site-packages",
    "test/cpp/naming/resolver_component_tests_runner.py",  # AUTO-GENERATED
    "grpc_version.py", # AUTO-GENERATED from a template
    "python_version.py", # AUTO-GENERATED from a template
    "src/python/grpcio/grpc_core_dependencies.py", # AUTO-GENERATED from a template
    "src/python/grpcio/grpc/_grpcio_metadata.py", # AUTO-GENERATED from a template
    "tools/distrib/python/grpcio_tools/protoc_lib_deps.py", # AUTO-GENERATED BY make_grpcio_tools.py
    "src/python/grpcio_observability/observability_lib_deps.py", # AUTO-GENERATED BY make_grpcio_observability.py
    ".*_pb2.py",  # autogenerated Protocol Buffer files
    ".*_pb2_grpc.py",  # autogenerated Protocol Buffer gRPC files
    "tools/distrib/python/xds_protos/.*" # AUTO-GENERATED By tools/distrib/python/xds_protos/build.py
]


[lint]
ignore = [
    # B - flake8-bugbear (common code smells/potential bugs)
    "B024",  # Class is an abstract base class, but has no abstract methods or properties
             # (Often occurs when ABCs are used more for conceptual interface rather than enforcing abstract methods)
    "B027",  # Empty method in an abstract base class, but has no abstract decorator
             # (Similar to B024, indicates a method in an ABC that should either be abstract or removed)
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None`
             # (Promotes explicit exception chaining for better debugging)

    # FBT - flake8-boolean-trap (boolean trap arguments)
    "FBT001", # Boolean-typed positional argument in function definition
             # (Suggests using keyword-only arguments for booleans to improve readability)
    "FBT002", # Boolean default positional argument in function definition
             # (Similar to FBT001, but for arguments with default boolean values)
    "FBT003", # Boolean positional value in function call
             # (Suggests explicitly naming boolean arguments in function calls for clarity, e.g., `verbose=True` instead of just `True`)

    # FA - flake8-annotations-autofix (type annotation issues)
    "FA100", # Add `from __future__ import annotations` to simplify `typing.Optional`, `typing.List`, etc.
             # (This rule indicates that you can use native type hints like `list[str]` instead of `typing.List[str]` if you add `from __future__ import annotations` at the top of the file. If you're not using Python 3.9+ features, or the files are library internals, this might be noise.)

    # SLF - flake8-self (private member access)
    "SLF001", # Private member accessed (e.g., `obj._private_member`)
              # (Warns against accessing attributes/methods starting with an underscore, which are conventionally private. Common in library internals or tests.)

    # TRY - tryceratops (exception handling best practices)
    "TRY002", # Create your own exception (instead of raising generic `Exception`)
    "TRY003", # Avoid specifying long messages outside the exception class
             # (Encourages defining custom exception classes for detailed messages, or formatting messages separately)
    "TRY401", # Redundant exception object included in `logging.exception` call
             # (`logging.exception()` automatically includes exception info, so passing `exc_info=True` or the exception object directly is redundant)

    # TD - flake8-todos (TODO/FIXME comments)
    "TD003", # Missing issue link for this TODO (expects a link to a bug tracker)
    "TD004", # Missing colon in TODO (expects "TODO: " instead of "TODO ")

    # FIX - autoflake (fixable errors)
    "FIX002", # Line contains TODO, consider resolving the issue
             # (Flags TODO/FIXME comments, encouraging their resolution)
    "FIX004", # Line contains HACK, consider resolving the issue
             # (Flags HACK comments, encouraging their resolution)

    # ARG - flake8-unused-arguments (unused function/method arguments)
    "ARG001", # Unused function argument
    "ARG002", # Unused method argument
    "ARG005", # Unused lambda argument

    # LOG - flake8-logging-format (logging best practices)
    "LOG015", # `exception()` call on root logger (recommends using a named logger)

    # PERF - Perflint (performance issues)
    "PERF203", # `try`-`except` within a loop incurs performance overhead (suggests moving it outside the loop if possible)

    # SIM - flake8-simplify (code simplification)
    "SIM102", # Use a single `if` statement instead of nested `if` statements (e.g., `if a: if b: ...` -> `if a and b: ...`)
    "SIM105", # Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`
             # (For intentionally suppressed exceptions)

    # S - Bandit (security warnings)
    "S105", # Possible hardcoded password assigned to: "..." (often a false positive for non-sensitive string literals)
    "S110", # `try`-`except`-`pass` detected, consider logging the exception (warns about silent exception handling)

    # PYI - flake8-pyi (type-hinting best practices for stub files / general type use)
    "PYI024", # Use `typing.NamedTuple` instead of `collections.namedtuple`
             # (Modern Python type hinting prefers NamedTuple for clarity and static analysis benefits)
    "PYI045", # `__aiter__` methods should return an `AsyncIterator`, not an `AsyncIterable`

    # UP - flake8-upgrade (modern Python syntax)
    "UP031", # Use format specifiers instead of percent format (f-strings or .format() instead of `%s`)

    # G - flake8-logging-format (more logging issues)
    "G004", # Logging statement uses f-string (some styles prefer non-f-string for logging messages)

    # YTT - flake8-type-checking (issues related to type checking imports)
    "YTT203", # `sys.version_info[1]` compared to integer (python4), compare `sys.version_info` to tuple
             # (Suggests a more robust way to check Python versions)

    # E - pycodestyle (basic style guide violations)
    "E722", # Do not use bare `except` (catch specific exceptions or `Exception` explicitly, not just `except:`)
    "E402", # Module level import not at top of file

    # PLE - Pylint (various errors/warnings)
    "PLE0604", # Invalid object in `__all__`, must contain only strings
              # (`__all__` should strictly contain string names of symbols to export)
    "PLW2901", # `for` loop variable `...` overwritten by assignment target
              # (Warns when a variable used as a loop iterator is then reassigned within the loop, which can be confusing)
    "PLW0603", # Using the global statement to update `...` is discouraged (discourages modifying global variables)
    
    "D",  # pydocstyle
    "ANN", # flake8-annotations
    "S101", # assert
    "C901", # mccabe complexity
    "EM", # flake8-errmsg
    "E501", # line too long, handled by 'format'
    "PLR0913", # too-many-arguments
    "PLR0912", # too-many-branches
    "PLR0915", # too-many-statements
    "PLR0911", # too-many-return-statements
    "PLR2004", # magic-value-comparison
    "N802", # invalid-function-name
    "N803", # invalid-argument-name
    "N806", # invalid-variable-name
    "N818", # error-suffix-in-exception-name
    "A001",   # Variable is shadowing a Python builtin
    "BLE001", # Do not catch blind exception: `Exception`
    "DTZ005", # `datetime.datetime.now()` called without a `tz` argument
    "ERA001", # Found commented-out code
    "F401",   # `...` imported but unused
    "F403",   # `from ... import *` used; unable to detect undefined names
    "PIE796", # Enum contains duplicate value
    "SLOT002",# Subclasses of `collections.namedtuple()` should define `__slots__`
    "TRY004", # Prefer `TypeError` exception for invalid type
    "TRY300", # Consider moving this statement to an `else` block
]

# Select all rules by default, and then ignore the ones we don't want.
# This is a good way to stay up-to-date with new rules in ruff.
select = ["ALL"]

# Allow unused variables that match these patterns.
dummy-variable-rgx = "^(_+|ignored_)"

[format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with 4 spaces.
indent-style = "space" 